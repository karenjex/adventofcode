# GOAL: Calculate the sum of the 2000th secret number generated by each buyer

# Secret number s[n] evolution:

#  1. mix s[0]*64 into s[0], prune the result => s[1]
#  2. mix (s[1] / 32 rounded down to nearest int) into s[1], prune the result => s[2]
#  3. mix s[2]*2048 into s[2],prune the result => s[3]

#  prune: s[n] = s[n] % 16777216

# After this process completes, the buyer is left with the next secret number in the sequence. The buyer can repeat this process as many times as necessary to produce more secret numbers.

# So, if a buyer had a secret number of 123, that buyer's next ten secret numbers would be:

# 15887950
# 16495136
# 527345
# 704524
# 1553684
# 12683156
# 11100544
# 12249484
# 7753432
# 5908254

# Initial secret number of each buyer:

# 1
# 10
# 100
# 2024

# Initial secret number and the 2000th new secret number they would generate are:

# 1: 8685429
# 10: 4700978
# 100: 15273692
# 2024: 8667524

# Adding up the 2000th new secret number for each buyer produces 37327623.

class SecretGenerator

  attr_reader :generated_secret

  def initialize(secret, num_evolutions)
    @initial_secret=secret
    @generated_secret=new_secret(num_evolutions)
  end

  def mix(val1,secret)
    # calculate the bitwise XOR of the given value and the secret number
    mixed_secret=val1^secret
    return mixed_secret
  end

  def prune(secret)
    # calculate the secret number modulo 16777216
    pruned_secret=secret%16777216
    return pruned_secret
  end

  def new_secret(num_evolutions)
    new_secret=@initial_secret
    for i in 1..num_evolutions
      new_secret=prune(mix(new_secret*64,new_secret))
      new_secret=prune(mix((new_secret/32).to_i,new_secret))
      new_secret=prune(mix(new_secret*2048,new_secret))
      puts
      puts new_secret
    end
    return new_secret
  end

end


result=0
File.foreach("input.txt") do
  |line|   
  secret=line.chomp.to_i
  puts secret
  secret_generator=SecretGenerator.new(secret, 2000)
  result+=secret_generator.generated_secret
end

puts
puts result